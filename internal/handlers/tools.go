package handlers

import (
	"context"
	"fmt"
	"log/slog"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
)

func HandleGetProjectsTool(
	ctx context.Context,
	_ mcp.CallToolRequest,
	input GetProjectsInput,
) (*mcp.CallToolResult, error) {
	client := GetJiraClient()

	logger := slog.Default().With("component", "HandleGetProjectsTool")

	logger.InfoContext(ctx, "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")

	projects, err := client.GetProjects(ctx)
	if err != nil {
		return mcp.NewToolResultError(
			fmt.Sprintf(
				"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.\n–û—à–∏–±–∫–∞: %v",
				err,
			),
		), nil
	}

	total := len(projects.Data)

	var b strings.Builder
	b.WriteString(
		fmt.Sprintf("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: %d\n", total),
	)
	b.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n")

	for i, p := range projects.Data {
		b.WriteString(fmt.Sprintf("%d. %s\n", i+1, p.Name))
		b.WriteString(fmt.Sprintf("ID: %s\n", p.Id))
		b.WriteString(fmt.Sprintf("Key: %s\n", p.Key))
		b.WriteString(fmt.Sprintf("EntityID: %s\n", p.EntityId))
		b.WriteString(fmt.Sprintf("Name: %s\n\n", p.Name))
	}

	return mcp.NewToolResultText(b.String()), nil
}
